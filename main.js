/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    let chain = Promise.resolve();
    const postFile = (file) => {
      if (file.extension !== "md") {
        return;
      }
      chain = chain.then(async () => {
        try {
          await sleep(1e3);
          const content = await this.app.vault.cachedRead(file);
          await fetch("https://api2.lifedash.link/webhook/obsidian", {
            method: "POST",
            mode: "no-cors",
            body: JSON.stringify({
              path: file.path,
              content
            })
          });
        } catch (e) {
        }
      });
    };
    const handleCreate = (file) => {
      console.log(`created a new file: ${file.path}`);
      if (file instanceof import_obsidian.TFile) {
        postFile(file);
      }
    };
    const handleModify = (file) => {
      console.log(`modified file: ${file.path}`);
      if (file instanceof import_obsidian.TFile) {
        postFile(file);
      }
    };
    this.registerEvent(this.app.vault.on("create", handleCreate));
    this.registerEvent(this.app.vault.on("modify", handleModify));
    this.registerEvent(this.app.vault.on("delete", (file) => {
      console.log(`deleted file: ${file.path}`);
    }));
    this.registerEvent(this.app.vault.on("rename", (file, oldPath) => {
      console.log(`renamed file: ${file.path} from ${oldPath}`);
    }));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
